-팝클라이언트가 페치메일이 되다.

페치메일 프로젝트에서 큰 전환이 일어났던 것은 Harry Hochgeiser가 클라이언트 컴퓨터의 SMTP 포트로 메일을 포워딩하는
대략적인 코드를 보내준 때였다. 이 기능을 구현한다면 다른 딜리버리 방법은 구식이 된다는 것을 깨달았다.

여러 주 동안 페치메일을 조금씩 뜯어고쳤는데, 인터페이스 설계가 작동하긴 했지만 지저분하다고 느끼고 있었다. 우아하지도 않고 몇 안 되는 옵션들이 너무 여기저기 흩어져 있었다. 
가져온 메일을 메일상자 파일에 부어놓을 것인지, 표준 출력으로 내보낼 것인지 결정하는 옵션이 특히 골칫거리였지만 왜 그런지 확실히 깨닫지는 못했다.

SMTP 포워딩을 생각하자 그동안 팝클라이언트가 너무 많은 것을 해내려고 했다는 것을 알게 됐다. 팝클라이언트는 MTA와 MDA의 기능을 모두 갖추도록 설계됐다.
SMTP 포워딩만 할 수 있다면 MDA 기능을 없애고 순수한 MTA가 될 수 있었다. 센드메일과 마찬가지로 최종적인 메일 배달은 다른 프로그램에 맡기면 된다.

몇 가지 배울 점이 있다면 SMTP 포워딩에 대한 아이디어는 리누스의 방법을 모방하려고 의식적으로 노력한 것에 대한 가장 큰 보답이었다.
사용자 한 명이 정말 좋은 아이디어를 주었으며, 저자는 그 의미를 이해만 하면 되었다.

팝클라이언트를 MTA와 MDA 기능을 다 갖추고 복잡한 지역 딜리버리 모드까지 갖춘 것으로 개발해 나가면서 잘못된 문제를 풀려고 노력하고 있다.
페치메일의 설계는 가장 기초적인 것부터 재고해서 SMTP 포트로 메일을 딜리버리하는 인터넷 메일 경로의 핫 부분인 MTA가 되어야 했다.

만약에 개발 도중에 어려움을 겪는다면, 그 때에는 정답을 가졌는지가 아니라 질문이 올바른 것인지 의문을 가져봐야 하는 경우가 있다. 이 때는 문제의 틀을 다시 잡아야 할 것이다.
저자는 문제의 틀을 다시 잡았다. 1. SMTP 포워딩 지원 기능을 일반 드라이버에 포함한다. 2. SMTP 포워딩을 기본 모드로 만든다. 3.마지막으로 다른 딜리버리 모드를 특히, '파일 딜리버리'
과 '표준 출력으로 딜리버리'를 제거해야 했다.

3단계 에서 힘들었는데, 그 이유는 팝클라이언트를 사용하면서 다른 딜리버리 모드에 의존하는 사용자의 마음을 불편하게 만들고 싶지 않아서였다.
포워드 파일이나 센드메일 외의 비슷한 프로그램으로 전환하여 동일한 결과를 얻을 수 있었지만, 실제로는 다른 프로그램으로 전환하는 것 자체가 큰일이 된다.

우려했던 것과 달리 3단계를 실행하고 이점이 매우 많은 것으로 나타났다. 드라이버 코드 중 가장 힘든 부분이 사라졌고 시스템의 MDA와 사용자의 메일 상자를 
굳이 다 찾아다닐 필요가 없어졌고, OS가 파일 잠금을 지원하는지 걱정할 필요도 없어졌다.

또한 성능도 향상됐다. 변경에 따른 그다지 중요하지 않은 또 하나의 이점이라면 메뉴얼 페이지가 훨씬 간단 해졌다는 것이다.
나중에 저자는 사용자가 지정한 지역 MDA를 통해 배달하는 기능을 다시 넣어야 했다. 동적 SLIP을 포함해 몇몇 애매한 상황을 다뤄야 했기 때문이다. 하지만 처음보다 훨씬 간단한 방법을 찾아낼 수 있었다.

코드가 더 나아지고 간단해지고 있을 때가 바로 일이 제대로 되어가고 있다는 것을 알게되는 때이다. 그 과정에서 페치메일의 설계는 조상 격인 팝클라이언트와 다른 자신만의 정체성을 갖게 된다.
이름을 바꿀 때가 된 것이다. 새로운 설계는 예전의 팝클라이언트보다 센드메일과 비슷해 보였다. 둘다 MTA였지만 센드메일은 PUSH후에 메일을 딜리버리했고 새로운 팝클라이언트는
PULL후에 메일을 딜리버리했다. 그래서 두 달후에 저자는 팝클라이언트의 이름을 페치메일로 변경했다.





-페이메일에서 배울 점

일반적인 소프트웨어 공학 주제로 돌아가기 전에 페치메일의 경험에서 배울 점이 몇 가지 더 있다.
RC파일 구문은 선택 사항으로 'noise'라는 키워드를 포함한다. RC파일에서 허용하는 영어와 비슷한 구문은 잘라낼 것을 모두 잘라내고 얻은 전통적이고 간명한 키워드와 값의 쌍에 비해 훨씬 알아보기 쉽다.
이것은 저자가 RC파일의 선언들이 소언어를 얼마나 많이 닮아가기 시작했는지 알아차린 뒤 실험에서 시작됐다.('server'라는 키워드를 'poll'로 바꾼 이유도 이것이다.)

전통적인 프로그래머들은 정확하고 짧으며 중복을 허용하지 않는 제어 구문을 선호하는 경향이 있다. 컴퓨팅 자원이 비싸서 구문 분석 단계가 최대한 싸고 간단해야 했을 때부터 내려온 문화적 유산이다.
저자가 영아와 비슷한 구문을 일반적으로 피하는 이유는 아니다. 언급한 이유는 그런 관습을 없애기 위해서이다. 예를 들어 CPU와 메모리 가격이 싸졌는데도 간명한은 저절로 없어지지 않았다.

물론 조심해야할 충분한 이유가 있다. 한 가지는 구문 분석 단계의 복잡성에 대한 비용이다. 구문 분석 단계를 버그가 우글거리면서 사용자로 하여금 그 자체만으로 혼란을 느끼게 만들고 싶지는 않을 것이다
또 하나의 이유는 언어의 구문을 영어와 비슷하게 만들려고 노력하면 그 ‘영어’가 심각하게 왜곡돼 자연어와의 피상적인 유사점이 전통적인 구문만큼이나 혼란스럽게 되는 경우가 많다는 점이다.

언어의 영역이 매우 제한돼 있기 때문에 페치메일 제어 구문에서는 이런 문제를 피하려고 했다. 일반적인 목적의 언어와는 거리가 멀었다. 
언어가 표현하는 것이 별로 복잡하지 않았기 때문에 영어의 아주 작은 하위 집합에서 실제 제어 언어로 옮겨가는데 혼란을 일으킬 가능성이 적었다. 더 넓은 의미의 교훈을 여기에서 얻었다.

또 하나의 교훈은 불투명함에 의한 보안이다. 페치메일 사용자 중에는 스누퍼snooper가 우연히 비밀번호를 보지 못하도록 rc 파일에 있는 비밀번호를 암호화하자고 말하는 사람이 있었다. 
저자는 그 말을 받아들이지 않았는데, 그렇게 한다고 해서 보안이 강화되는 것이 아니기 때문이다.
rc 파일의 읽기 권한을 얻은 사람이라면 사용자와 마찬가지로 페치 메일을 실행시킬 수도 있다. 그리고 그들이 비밀번호를 원한다면 비밀번호를 얻기 위해 페치메일 코드에서 디코딩하는 코드를 뽑아낼 수도 있다.
'보안 시스템은 그것이 보호하려는 비밀만큼만 안전하다. 가짜 비밀에 주의하라'




-사용자가 있다는 것의 중요성-

저자가 팝클라이언트 사용자들을 넘겨받았다는 것도 중요하다. 사용자가 있다는 것은 매우 좋은 일이다. 당신이 누군가의 필요를 충족시켜주고 있으며 일을 잘 해 나가고 있다는 것을 보여주기 때문만은 아니다.
적절하게 유도한다면 사용자는 공동 개발자가 될 수도 있다. 조금만 격려해주면 사용자들은 문제를 분석하고 해결책을 제시하며, 도움 없이 혼자 일할 때보다 훨씬 빨리 코드를 개선하도록 해준다.


되돌아보면, 리눅스의 성공과 방법론은 GNU 이맥스 리스프 라이브러리와 리스프 코드 아카이브에서 그 선례를 찾아볼 수 있다. 
이맥스의 C 코드 핵심이나 대부분의 다른 FSF 도구들의 성당 건축 방식과 대조적으로 리스프 코드 풀pool의 진화는 유동적이고 사용자가 주도했다.
아이디어와 이맥스 모드들의 원형은 안정적인 최종 형태를 갖추기까지 종종 서너 번씩 다시 쓰였다. 느슨하게 묶인 공동 작업이 인터넷으로 인해 가능해졌고, 리눅스에서처럼 매우 자주 일어나는 일이 됐다.


사실 페치메일 이전에 나 자신의 가장 성공적인 해킹은 아마 이맥스 VC 모드였을 것이다.
세 명의 사람들과 이메일로 리눅스와 비슷한 협동 작업을 했고, 지금까지 그 중 한 명인 (이맥스의 저자면서 자유 소프트웨어 재단의 설립자인) 리처드 스톨먼만을 만나 보았다.
VC 모드는 SCCS, RCS, CVS를 위한 이맥스 안의 프런트엔드였고, ‘원 터치’ 판 관리 기능을 제공했다.09 이것은 누군가 만들어 놓은 작고 조악한 sccs.el 모드로부터 진화한 것이다.
VC의 개발은 이맥스와는 다르게 이맥스 리스프 코드가 발표와 테스트, 개선의 주기를 매우 빨리 반복할 수 있었기 때문에 성공했다.

코드를 법적으로 GPL에 묶어 두려는 FSF의 정책은 한 가지 예기치 못한 부작용을 가져왔다. 그것은 FSF가 시장 개발 방식을 사용하는 절차가 까다로워졌다는 점이다. 
이는 저작권법 체계에서 생길 수 있는 문제에 대비해 GPL 코드를 면역시키기 위해 20행 이상의 개인적 공헌에 대해서는 저작권을 양도받아야 한다고 FSF가 믿기 때문이다.
BSD와 MIT의 ‘X 컨소시엄 이용허락license’을 사용하는 사람에게는 이런 문제가 없다. 그들은 누군가가 문제를 일으킬 동기가 될만한 권리를 가지려 하지 않는다.


이맥스 외에도 두 개로 층이 나뉘는 구조를 갖는 사용자 공동체와 소프트웨어 제품이 있다. 즉, 성당 개발 방식의 핵심부와 시장 개발 방식의 도구상자 부분이 한데 결합해 있는 것이다.
그 중 하나가 상용 데이터 분석 및 시각화 도구 매트랩MATLAB이다.
매트랩과 이와 유사한 구조를 갖는 제품의 사용자들은 프로그램을 만지작거릴 수 있는 크고 다양한 공동체 안에서 수행과 숙성, 혁신이 끊임없이 일어나고 있는 곳은 대부분 개방된 도구 부분 쪽이라는 것을 보여준다.

















