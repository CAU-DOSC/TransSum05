ABSTRACT
페치메일은 리눅스가 이룩한 새로운 소프트웨어 공학 이론을 검증하기 위해 만들어진 프로젝트이다. 저자는 이 프로젝트를 분석하는데 있어 상업용 소프트웨어를 의미하는 성당 모델과 반대로 리눅스 세계를 의미하는 시장 모델을 이용한다. 
충분히 많은 사람이 있다면 찾을 수 없는 버그는 없다는 주장을 바탕으로 소프트웨어의 미래에 있어 이 통찰의 의미를 탐구해본다. 



The mail must get through

펜실베니아 주에 있는 조그만 무료 ISP업체에서 일하던 저자는 메일을 하나하나 확인하고 도착한 메일을 컴퓨터 도구를 이용해 다루고자 했지만 당시 프로그램 중에는 저자의 요구사항을 만족시킬 프로그램이 존재하지 않았다. 
저자는 POP3 클라이언트가 필요했고 처음부터 모두 개발하는 대신 존재하는 소프트웨어를 재사용, 재제작 하기로 마음먹는다. 두가지 프로그램을 눈여겨 보게 되었는데 오승홍씨의 fetchpop 과 칼 해리스의 popclient였다.
POP에 대한 기능이 필요했던 저자는 fetchpop에 개선사항을 추가했다. 하지만 그는 한가지 교훈, '갖고 있는 것을 버릴 계획을 세우라. 언젠가는 버리게 될 것이다.'를 떠올리며 fetchpop을 계속 발전시키기 보다는 popclient로 옮겨간다. fetchpop은 오직 pop3만 지원하는 반면 popclient는 여러 프로토콜을 지원하고 있었던 점이 주요했다. 올바른 방법을 찾기 위해 첫번째 시도(fetchpop)을 과감히 버렸다.
칼은 팝클라이언트에 흥미를 잃은 상태였고 저자는 그것을 개선할 아이디어가 있었다. 오픈소스의 문화에서 흔히 그러하듯이, 저자는 그의 프로젝트를 넘겨받았다.



Fetchmail grows up

페치메일은 이제 다양한 프로토콜의 지원으로 '카테고리 킬러'가 될 경쟁력을 갖춘 프로그램이 되었다. 하지만 이것은 처음부터 저자가 '위대한 도구'를 만드려는 목적을 가지거나 '독창적인 아이디어'에서 온 것이 아니었다. 다른 사람의 아이디어를 가지고 와서 더 멀리 끌고 가 구체화해서 성공한 리눅스처럼, 그 또한 칼과 해리의 아이디어를 가져와 밀어붙인 결과, 페치메일을 만들어낼 수 있었다.
그는 곧 자신과는 상관 없지만 다른사람에게는 필수적인 기능을 포함하고 지원해야 함을 깨달았고 '멀티드롭'과 '8비트 MIME' 작업에 착수한다. 멀티드롭 기능의 추가는 저자의 기대 뿐만 아니라 메일링 리스트를 운영하는데도 사용되면서 전혀 기대하지 않았던 용도에 알맞게 될 수도 있음을 깨닫는다.
또한 수신자가 강제하지 않는다면 정보를 절대로 잘라버리지 말라는 규칙을 따라 프로그램을 개발한 결과 8비트 MIME 작업은 버그없이 간단히 해낼 수 있었다.
