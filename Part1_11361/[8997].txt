오픈소스 소프트웨어의 사회적 문맥

다음과 같은 말이 있다. 가장 뛰어난 해킹은 해커의 일상적인 문제를 푸는 개인적인 해결책부터 시작된다. 그리고 그 문제가 많은 사용자들에게 전형적이라는 것이 밝혀지면 널리 퍼지게 된다. 첫 번째 법칙으로 되돌아와 더 유용한 방식으로 다시 말해보자.

재미있는 문제를 풀어보고 싶다면, 자신에게 재미있는 문제를 찾아 나서는 것부터 시작하라.

칼 해리스와 팝클라이언트가 그랬고, 나와 페치메일이 그랬다. 이 말은 오래 전부터 이해되어 왔다. 재미있는 점은 리눅스와 페치메일의 역사가 보여준 것처럼 그 다음 단계에 있다. 사용자와 공동 개발자가 이루는 크고 활동적인 공동체의 눈앞에서 소프트웨어가 진화해 가는 것이다.

맨먼스 미신에서 프레더릭 브룩스는 프로그래머의 시간을 다른 것으로 대체될 수 없다고 말했다. 지연되는 소프트웨어 프로젝트에 개발자를 더 투입하는 것은 완료 시기를 더 늦출 뿐이다. 그는 프로젝트에서 복잡성과 의사소통에 드는 비용이 개발자 수의 제곱에 비례하는 반면 작업 결과는 선형으로만 증가한다고 주장했다. 이 주장은 그때부터 '브룩스 법칙'으로 알려졌고 널리 자명한 이치로 간주 됐다. 하지만 브룩스의 법칙이 전부라면 리눅스는 불가능했을 것이다.

나중에 제럴드 와인버그의 고전인 프로그래밍 심리학에서 브룩스의 말에 대한 중요한 수정사항이 제시됐다는 것을 알았다. '자아를 내세우지 않는 프로그래밍'에 대한 논의에서 와인버그는 개발자들이 자신의 코드에 텃세를 부리지 않고 다른 사람으로 하여금 버그를 찾고 개선 가능성을 찾아내도록 격려하는 곳에서는 다른 어느 곳에서보다 극적으로 빠른 개선이 일어난다고 이야기했다.

아마도 와인버그의 분석이 적절한 평가를 받지 못한 이유는 용어 선택 때문이었을 것이다. 인터넷의 해커들이 '자아를 내세우지 않는다'고 묘사하는 것에는 웃음 지을 수 밖에 없다. 하지만 나는 그의 주장이 지금 그 어느 때보다 절실하다고 생각한다.

유닉스의 역사는 우리가 리눅스로부터 배우고 있는 것을, 그리고 내가 실험적으로 더 작은 규모로 리눅스의 방법을 따라함으로써 검증한 것을 미리 준비해 두었어야 했다. 다시 말해 코딩은 본질적으로 고독한 작업인데 비해 정말 중요한 해킹은 전체 공동체와 주의와 지력을 악용함으로써 이루어진다는 것이다. 폐쇄 프로젝트에서 자신의 두뇌만을 사용하는 개발자는 수백 명의 사람이 버그를 찾아내고 개선을 이루어내는 열려 있는 진화적 환경을 어떻게 만들어 내는지 아는 개발자에 비해 뒤떨어지기 마련이다.

하지만 전통적 유닉스 세계에는 이런 접근 방법을 끝까지 밀어 붙이지 못하는 요인이 몇 가지 있었다. 첫 번째는 다양한 이용허락의 법적인 제약, 영업비밀, 그리고 상업적인 이해 관계였다. 또 하나는 나중에야 알게 됐지만 인터넷이 그리 훌륭하지 못했기 때문이다.

싼 가격에 인터넷을 이용할 수 있게 되기 전에는 지리적으로 좁은 지역에 공동체가 자리잡고 있었고, 그 공동체 문화에는 와인버그의 '자아를 내세우지 않는' 프로그래밍이 장려됐으며 개발자들은 쉽게 많은 사람들, 즉 숙련된 훈수꾼과 공동 개발자를 끌어들일 수 있었다. 벨 연구소, MIT 인공지능 연구소, UC 버클리 같은 곳이 바로 전서렂ㄱ인 혁신이 일어난 곳이고 여전히 그런 잠재력을 지닌 곳이다.

리눅스는 재능을 끌어올 풀로 전 세계를 사용하기 위해 의식적으로, 또 성공적으로 노력한 최초의 프로젝트였다. 나는 리눅스의 태동기가 월드 와이드 웹의 탄생과 일치하는 것을, 그리고 리눅스가 유아기를 벗어나던 1993~1994년경에 ISP 산업과 인터넷에 주류의 관심이 폭발하기 시작했던 것을 우연이라고 생각하지 않는다. 리눅스는 급속히 보급된 인터넷을 가능하게 했던 그 규칙에 따라 어떻게 일을 진행해야 하는지 알았던 최초의 사람이다.

 저렴하게 인터넷을 사용할 수 이었던 것이 리눅스 모델이 진화하는 데 필수적인 조건이긴 했지만 그것이 충분 조건이라고 생각하지는 않는다. 또 하나의 중요한 요소는 리더십 방식과 협력하는 관습의 발전인데 이것이 개발자로 하여금 공동 개발자를 끌어 모으고 매체를 최대한 활용하게 했던ㄱ 것이다.

그렇다면 리더십 방식이란 무엇이고 이런 관습이란 어떤 것인가? 권력관계에 기반한 것을 분명 아니다. 만일 그런 것에 기반했다면 강제에 의한 리더십을 우리가 보는 것과 같은 결과를 내지 못했을 것이다. 와인버그는 19세기 러시아 무정부주의자 표트르 알렉세예비치 크로포트킨의 크로프트킨 자서전에서 다음과 같은구절을 인용했다.

농노를 소유한 가정에서 컷기 때문에 나는 내 시대 모든 젊은이들처럼 능동적인 생활을 했다. 명령하고, 지시하고, 꾸중하고, 벌주는 그런 일에 대한 필요성을 크게 확신했다. 하지만 내가 큰 사업을 경영해야 했을 때는 자유인들과 거리해야 했고 단 한 번의 실수로 심각한 결과가 나타나게 됐을 때 명령과 훈육의 원리에 기반해 행동하는 것과 공동 이해의 원리에 의해 행동하는 것 사이의 차이점을 높이 평가하기 시작했다. 군대에서라면 전자에 따라 일하는 것이 훨씬 낫겟지만, 실생활에서 만흥ㄴ 사람의 의지를 수렴해서 노력해야만 이룰 수 있는 목표를 겨냥했을 때는 별 가치가 없다.

'많은 사람의 의지를 수렴해 노력하는 것'이 바로 리눅스와 같은 프로젝트가 요구하는 것이다. 그리고 '명령의 원리'는 결과적으로 우리가 인터넷이라고 부르는 무 정부주의자들의 천국에 사는 자원봉사자에게 적용하기 불가능한 것이다. 효과적으로 일하고 경쟁하기 위해 공동 프로젝트를 이끌어 보고 싶은 해커들으 크로프토킨의 이해의 원리가 어렴풋이 제시하는 방식에 따라 같은 관심을 가진 공동체를 어떻게 효과적으로 끌어 모으고 격려할 것인지 배워야 한다.

앞에서 나는 리눅스의 법칙을 설명하려고 델파이 효과를 언급했다. 하지만 생물학과 경제학에서의 적응계에 비유하는 것이 더 강력한 비유라고 할 수 있다. 리눅스 세계는 많은 점에서 생태계나 자유 시장과 같이 행동한다. 일단은 이기적 에이전트들이 효용을 극대화하려고 애쓰는 과정을 통해 스스로 수정하는 자율적인 질서를 만들어내며, 이것은 중앙 통제가 이룰 수 있는 어떤 결과보다 더 정교하고 효율적이다. 그렇다면 여기에서 '이해의 원리'를 찾아낼 수 있다.

리눅스 해커들이 최대화하려는 '효용 함수'는 고전적 의미에서의 경제적인 것이 아니라 그들 자신의 측정할 수 없는 자아 만족과 다른 해케들 사이의 평판이다. 이런 동기를 '이타적'이라고 말할 지도 모르겠지만 그렇게 말하는 것은 이타주의 그 자체가 이타주의자의 자아를 만족시키는 한 형태라는 사실을 무시하는 것이다. 이런 방식으로 일을 처리하는 자발적 문화는 사실 그렇게 찾아보기 힘들 것은 아니다. 내가 오랫동안 참여해왔던 또 하나의 문화는 공상과학 소설 팬들의 세계다. 해커들의 세계와 다르지 않게 여기에서는 다른 팬들 사이에서 자신의 평판이 노ㅠ아지는 '자아 상승'이 자발적인 활동 뒤의 기본적인 동기라고 분명하게 인식한다

리눅스는 대부분 다른 사람들에 의해 개발이 이루어지는 프로젝트의 문지기로 자신을 위치시키는데 성공했고, 프로젝트가 스스로 유지될 수 있기까지 계속해서 흥미거리를 공금해 줌으로써 크로프트킨의 '공유 이해의 원리'의 의미를 정확하게 따랐다. 준 경제학적인 관점에서 리눅스 세계를 보면 어떻게 이해가 적용됐는지를 알 수 있다.

리눅스의 방법을 자아 상승에 있어서 효과적인 시장을 만드는 길로 볼 수 있다. 개개인의 해커들이 이기심을 지속적인 협동으로만 이룩할 수 있는 어려운 목적과 최대한 단단하게 연결시키는 것이다. 페치메일 프로젝트에서 나는 더 작은 규모였지만 이 방법을 그대로 따라 했고 좋은 결과를 냈다. 아마도 내가 리눅스보다 더 의식적이고 체계적으로 일을 해냈을 것이다. 많은 사람들, 특히 자유 시장을 정치적으로 믿지 않는 사람들은 스스로에게 방향이 맞추어진 이기주의자들의 문화가 파편화돼 있으며 텃세가 심하고 소모적이면서, 비밀이 많고 적대적일 것이라고 생각한다. 하지만 하나만 예로 들자면 이런 기대는리눅스 문서의 놀랄만한 다양성과 질, 깊이에 의해 산산이 부서지고 만다. 프로그래머들이 문서 작업을 끔찍하게 싫어한다는 것은 모두가 기정 사실로 받아들이고 있다. 그렇다면 대체 리눅스 해커들이 문서를 그렇게 많이 많들어냈다는 것을 어떻게 설명할 것인가? 분명히 리눅스의 자아 상승을 ㅜ이한 자유 시장은 막대한 자금이 들어간 상업용 소프트웨어 제작자들의 문서 작업보다 다른 사람을 위한 고결한 행동을 더 잘 해낸 것이다.

페치메일과 리눅스 커널 프로젝트는 둘 다 많은 해커들의 자아를 적절히 보상해 줌으로써 강력한 개발자와 조정자가 인터넷을 이용해 많은 수의 공동 개발자를 가지는 이익을 얻으면서 프로젝트가 혼란스럽게 스스로 붕괴하는 것을 막을 수 있다는 것을 보여준다. 브룩스의 법칙에 대해서 나는 다음과 같은 반대 제안을 한다.

개발 조정자가 최소한 인터넷만큼 좋은 매체를 갖고 있으며 강제력을 사용하지 않고 어떻게 이끌어야 할 지 알고 있다면, 한 명 보다는 여러 명의 지도자가 필연적으로 더 낫다.

미래의 오픈소스 소프트웨어는 점점 리눅스의 게임을 어떻게 해야 하는지 아는 사람들, 성당을 뒤로 하고 시장을 끌어안을 수 있는 사람들에게 속할 것이라고 생각한다. 개인의 비전과 똑똑함이 문제가 되지 않으리라는 말이라기보다는 오픈소스 소프트웨어의 최첨단은 개인의 비전과 똑똑함에서 시작해 자발적으로 흥미를 보이는 공동체를 효과적으로 구축해서 그것을 증폭시키는 사람들에게 속할 것이라는 뜻이다.

그리고 그것은 오픈소스 소프트웨어의 미래에만 국한되지는 않을 것이다. 폐쇄 소스로 개발하는 사람은 리눅스 공동체가 문제를 해결하기 위해 끌어낼 수 있는 재능의 풀과 결쟁할 수 없다. 극소수만 이 페치메일에 공헌했던 200명보다 많은 사람을 고용할 수 있을 것이다. (1999년에는 600명, 2000년에는 800명이 됐다.)

아마 최종적으로는 협동이 더 도덕적이라거나 '소프트웨어 매점'이 덜 도덕적이라서가 아니라 단지 폐쇄 소스 측과 오픈소스 공동체와의 군비 경쟁엣 오픈소스 측이 한 문제가 훨씬 큰 기율로 숙련된 사람의 시간을 쏟을 수 있기 때문에 오픈소스 문화가 승리를 거둘 것이라는 얘기다.